# 英语四级学习系统 - Docker Compose配置
# 完全独立的容器化部署，包含所有必需服务

version: '3.8'

networks:
  cet4_learning_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  milvus_data:
  etcd_data:
  minio_data:
  app_logs:
  app_uploads:
  app_reports:

services:
  # PostgreSQL数据库服务
  postgres:
    image: postgres:15-alpine
    container_name: cet4-postgres
    environment:
      POSTGRES_DB: cet4_learning
      POSTGRES_USER: cet4_user
      POSTGRES_PASSWORD: cet4_password_2024
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - cet4_learning_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cet4_user -d cet4_learning"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Redis缓存服务
  redis:
    image: redis:7-alpine
    container_name: cet4-redis
    command: redis-server --appendonly yes --requirepass cet4_redis_2024
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - cet4_learning_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Etcd服务（Milvus依赖）
  etcd:
    image: quay.io/coreos/etcd:v3.5.0
    container_name: cet4-etcd
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    volumes:
      - etcd_data:/etcd
    ports:
      - "2379:2379"
    networks:
      - cet4_learning_network
    restart: unless-stopped

  # MinIO对象存储服务
  minio:
    image: minio/minio:latest
    container_name: cet4-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - cet4_learning_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Milvus向量数据库服务
  milvus:
    image: milvusdb/milvus:v2.3.0
    container_name: cet4-milvus
    command: ["milvus", "run", "standalone"]
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    volumes:
      - milvus_data:/var/lib/milvus
    ports:
      - "19530:19530"
      - "9091:9091"
    networks:
      - cet4_learning_network
    depends_on:
      - etcd
      - minio
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # FastAPI主应用服务
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cet4-app
    environment:
      # 数据库配置
      DATABASE_URL: postgresql://cet4_user:cet4_password_2024@postgres:5432/cet4_learning

      # Redis配置
      REDIS_URL: redis://:cet4_redis_2024@redis:6379/0

      # Milvus配置
      MILVUS_HOST: milvus
      MILVUS_PORT: 19530

      # MinIO配置
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123

      # AI服务配置
      DEEPSEEK_API_KEYS: "sk-xxx,sk-yyy,sk-zzz"  # 实际部署时替换

      # 应用配置
      SECRET_KEY: "cet4-learning-secret-key-2024-very-secure"
      DEBUG: "false"
      ENVIRONMENT: "production"

      # 日志配置
      LOG_LEVEL: "INFO"
      LOG_FILE: "/app/logs/app.log"
    volumes:
      - app_logs:/app/logs
      - app_uploads:/app/uploads
      - app_reports:/app/reports
    ports:
      - "8000:8000"
    networks:
      - cet4_learning_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      milvus:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Celery异步任务处理器
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cet4-celery-worker
    command: ["celery", "-A", "app.core.celery_app", "worker", "--loglevel=info", "--concurrency=4"]
    environment:
      # 继承app服务的环境变量
      DATABASE_URL: postgresql://cet4_user:cet4_password_2024@postgres:5432/cet4_learning
      REDIS_URL: redis://:cet4_redis_2024@redis:6379/0
      MILVUS_HOST: milvus
      MILVUS_PORT: 19530
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123
      DEEPSEEK_API_KEYS: "sk-xxx,sk-yyy,sk-zzz"
      SECRET_KEY: "cet4-learning-secret-key-2024-very-secure"
      DEBUG: "false"
      ENVIRONMENT: "production"
      LOG_LEVEL: "INFO"
    volumes:
      - app_logs:/app/logs
      - app_uploads:/app/uploads
      - app_reports:/app/reports
    networks:
      - cet4_learning_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      app:
        condition: service_healthy
    restart: unless-stopped

  # Celery定时任务调度器
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cet4-celery-beat
    command: ["celery", "-A", "app.core.celery_app", "beat", "--loglevel=info"]
    environment:
      # 继承app服务的环境变量
      DATABASE_URL: postgresql://cet4_user:cet4_password_2024@postgres:5432/cet4_learning
      REDIS_URL: redis://:cet4_redis_2024@redis:6379/0
      SECRET_KEY: "cet4-learning-secret-key-2024-very-secure"
      DEBUG: "false"
      ENVIRONMENT: "production"
      LOG_LEVEL: "INFO"
    volumes:
      - app_logs:/app/logs
    networks:
      - cet4_learning_network
    depends_on:
      redis:
        condition: service_healthy
      app:
        condition: service_healthy
    restart: unless-stopped

  # Nginx反向代理服务
  nginx:
    image: nginx:alpine
    container_name: cet4-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - app_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - cet4_learning_network
    depends_on:
      app:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped