# 英语四级学习系统 - 持续集成工作流
# 自动化代码质量检查、测试和构建验证

name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  POETRY_VERSION: '1.6.1'

jobs:
  # 代码质量检查
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # 确保安装所有必需的依赖
        pip install httpx aiofiles 'python-jose[cryptography]'
        pip install ruff mypy black isort
        
    - name: Run Ruff linting
      run: |
        echo "::group::Ruff Linting"
        ruff check . --output-format=github
        echo "::endgroup::"
        
    - name: Run Black formatting check
      run: |
        echo "::group::Black Formatting Check"
        black --check --diff .
        echo "::endgroup::"
        
    - name: Run isort import sorting check
      run: |
        echo "::group::isort Import Sorting Check"
        isort --check-only --diff .
        echo "::endgroup::"
        
    - name: Run MyPy type checking
      run: |
        echo "::group::MyPy Type Checking"
        mypy . --ignore-missing-imports --show-error-codes
        echo "::endgroup::"

  # 前端代码质量检查
  frontend-quality:
    name: Frontend Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci
      
    - name: Run ESLint
      working-directory: frontend
      run: |
        echo "::group::ESLint Check"
        npm run lint
        echo "::endgroup::"
        
    - name: Run TypeScript compilation check
      working-directory: frontend
      run: |
        echo "::group::TypeScript Compilation Check"
        npm run type-check
        echo "::endgroup::"
        
    - name: Run Prettier formatting check
      working-directory: frontend
      run: |
        echo "::group::Prettier Formatting Check"
        npm run format:check
        echo "::endgroup::"

  # 后端单元测试
  backend-tests:
    name: Backend Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # 确保安装所有必需的依赖
        pip install httpx aiofiles 'python-jose[cryptography]'
        pip install pytest pytest-cov pytest-asyncio pytest-mock pytest-benchmark
        
    - name: Set up test environment
      run: |
        cp .env.example .env.test
        echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_db" >> .env.test
        echo "REDIS_URL=redis://localhost:6379/0" >> .env.test
        echo "ENVIRONMENT=test" >> .env.test
        
    - name: Run database migrations
      run: |
        export ENVIRONMENT=test
        alembic upgrade head
        
    - name: Run unit tests with coverage
      run: |
        echo "::group::Backend Unit Tests"
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=html --cov-report=term
        echo "::endgroup::"
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

  # 前端单元测试
  frontend-tests:
    name: Frontend Unit Tests
    runs-on: ubuntu-latest
    needs: frontend-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      working-directory: frontend
      run: npm ci
      
    - name: Run unit tests
      working-directory: frontend
      run: |
        echo "::group::Frontend Unit Tests"
        npm run test:coverage
        echo "::endgroup::"
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: false

  # Docker构建测试
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: cet4-learning:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker image
      run: |
        echo "::group::Docker Image Test"
        docker run --rm -d --name test-container cet4-learning:test
        sleep 10
        docker logs test-container
        docker stop test-container
        echo "::endgroup::"

  # 安全扫描
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Bandit security scan
      run: |
        pip install bandit[toml]
        echo "::group::Bandit Security Scan"
        bandit -r app/ -f json -o bandit-report.json || true
        bandit -r app/ -f txt
        echo "::endgroup::"
        
    - name: Run Safety dependency scan
      run: |
        pip install safety
        echo "::group::Safety Dependency Scan"
        safety check --json --output safety-report.json || true
        safety check
        echo "::endgroup::"
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # 集成测试总结
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [code-quality, frontend-quality, backend-tests, frontend-tests, docker-build, security-scan]
    if: always()
    
    steps:
    - name: Check CI results
      run: |
        echo "::group::CI Results Summary"
        echo "Code Quality: ${{ needs.code-quality.result }}"
        echo "Frontend Quality: ${{ needs.frontend-quality.result }}"
        echo "Backend Tests: ${{ needs.backend-tests.result }}"
        echo "Frontend Tests: ${{ needs.frontend-tests.result }}"
        echo "Docker Build: ${{ needs.docker-build.result }}"
        echo "Security Scan: ${{ needs.security-scan.result }}"
        echo "::endgroup::"
        
        if [[ "${{ needs.code-quality.result }}" != "success" ]] || \
           [[ "${{ needs.frontend-quality.result }}" != "success" ]] || \
           [[ "${{ needs.backend-tests.result }}" != "success" ]] || \
           [[ "${{ needs.frontend-tests.result }}" != "success" ]] || \
           [[ "${{ needs.docker-build.result }}" != "success" ]]; then
          echo "❌ CI pipeline failed"
          exit 1
        else
          echo "✅ CI pipeline passed"
        fi
