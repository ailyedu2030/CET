# 英语四级学习系统 - 持续部署工作流
# 自动化部署到测试和生产环境

name: Continuous Deployment

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      force_deploy:
        description: 'Force deployment (skip some checks)'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 构建和推送Docker镜像
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          VCS_REF=${{ github.sha }}
          VERSION=${{ steps.meta.outputs.version }}

  # 部署到测试环境
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging.cet4-learning.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up deployment environment
      run: |
        echo "DEPLOYMENT_ENV=staging" >> $GITHUB_ENV
        echo "IMAGE_TAG=${{ needs.build-and-push.outputs.image-tag }}" >> $GITHUB_ENV
        
    - name: Create deployment package
      run: |
        mkdir -p deployment-package
        cp docker-compose.yml deployment-package/
        cp docker-compose.prod.yml deployment-package/
        cp -r nginx/ deployment-package/
        cp -r scripts/ deployment-package/
        
        # 创建环境变量文件
        cat > deployment-package/.env << EOF
        # Staging Environment Configuration
        POSTGRES_PASSWORD=${{ secrets.STAGING_POSTGRES_PASSWORD }}
        REDIS_PASSWORD=${{ secrets.STAGING_REDIS_PASSWORD }}
        MINIO_ROOT_USER=${{ secrets.STAGING_MINIO_USER }}
        MINIO_ROOT_PASSWORD=${{ secrets.STAGING_MINIO_PASSWORD }}
        SECRET_KEY=${{ secrets.STAGING_SECRET_KEY }}
        DEEPSEEK_API_KEYS=${{ secrets.DEEPSEEK_API_KEYS }}
        ALLOWED_HOSTS=staging.cet4-learning.com,localhost
        CORS_ORIGINS=https://staging.cet4-learning.com
        GRAFANA_PASSWORD=${{ secrets.STAGING_GRAFANA_PASSWORD }}
        ENVIRONMENT=staging
        IMAGE_TAG=${{ env.IMAGE_TAG }}
        EOF
        
    - name: Deploy to staging server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        port: ${{ secrets.STAGING_PORT }}
        script: |
          # 创建部署目录
          mkdir -p /opt/cet4-learning/staging
          cd /opt/cet4-learning/staging
          
          # 备份当前部署
          if [ -d "current" ]; then
            mv current backup-$(date +%Y%m%d_%H%M%S)
          fi
          
          # 创建新部署目录
          mkdir -p current
          
    - name: Upload deployment package
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        port: ${{ secrets.STAGING_PORT }}
        source: "deployment-package/*"
        target: "/opt/cet4-learning/staging/current/"
        strip_components: 1
        
    - name: Execute deployment
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        port: ${{ secrets.STAGING_PORT }}
        script: |
          cd /opt/cet4-learning/staging/current
          
          # 设置脚本权限
          chmod +x scripts/*.sh
          
          # 拉取最新镜像
          docker-compose pull
          
          # 启动服务
          ./scripts/docker-deploy.sh start production
          
          # 等待服务启动
          sleep 30
          
          # 健康检查
          if curl -f http://localhost:8000/health; then
            echo "✅ Staging deployment successful"
          else
            echo "❌ Staging deployment failed"
            ./scripts/docker-deploy.sh stop
            exit 1
          fi
          
    - name: Run deployment tests
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        port: ${{ secrets.STAGING_PORT }}
        script: |
          cd /opt/cet4-learning/staging/current
          
          # 运行基本功能测试
          echo "Running deployment tests..."
          
          # 测试API健康检查
          curl -f http://localhost:8000/health || exit 1
          
          # 测试数据库连接
          docker-compose exec -T app python -c "
          import asyncio
          from app.core.database import get_database
          async def test_db():
              db = get_database()
              await db.execute('SELECT 1')
              print('Database connection OK')
          asyncio.run(test_db())
          " || exit 1
          
          echo "✅ All deployment tests passed"

  # 部署到生产环境
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://cet4-learning.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Manual approval check
      if: github.event.inputs.force_deploy != 'true'
      run: |
        echo "🚨 Production deployment requires manual approval"
        echo "This step ensures human oversight for production deployments"
        
    - name: Set up deployment environment
      run: |
        echo "DEPLOYMENT_ENV=production" >> $GITHUB_ENV
        echo "IMAGE_TAG=${{ needs.build-and-push.outputs.image-tag }}" >> $GITHUB_ENV
        
    - name: Create production deployment package
      run: |
        mkdir -p deployment-package
        cp docker-compose.yml deployment-package/
        cp docker-compose.prod.yml deployment-package/
        cp -r nginx/ deployment-package/
        cp -r scripts/ deployment-package/
        
        # 创建生产环境变量文件
        cat > deployment-package/.env << EOF
        # Production Environment Configuration
        POSTGRES_PASSWORD=${{ secrets.PROD_POSTGRES_PASSWORD }}
        REDIS_PASSWORD=${{ secrets.PROD_REDIS_PASSWORD }}
        MINIO_ROOT_USER=${{ secrets.PROD_MINIO_USER }}
        MINIO_ROOT_PASSWORD=${{ secrets.PROD_MINIO_PASSWORD }}
        SECRET_KEY=${{ secrets.PROD_SECRET_KEY }}
        DEEPSEEK_API_KEYS=${{ secrets.DEEPSEEK_API_KEYS }}
        ALLOWED_HOSTS=cet4-learning.com,www.cet4-learning.com
        CORS_ORIGINS=https://cet4-learning.com,https://www.cet4-learning.com
        GRAFANA_PASSWORD=${{ secrets.PROD_GRAFANA_PASSWORD }}
        ENVIRONMENT=production
        IMAGE_TAG=${{ env.IMAGE_TAG }}
        EOF
        
    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USER }}
        key: ${{ secrets.PROD_SSH_KEY }}
        port: ${{ secrets.PROD_PORT }}
        script: |
          # 创建部署目录
          mkdir -p /opt/cet4-learning/production
          cd /opt/cet4-learning/production
          
          # 备份当前部署
          if [ -d "current" ]; then
            ./current/scripts/docker-deploy.sh backup
            mv current backup-$(date +%Y%m%d_%H%M%S)
          fi
          
          # 创建新部署目录
          mkdir -p current
          
    - name: Upload production deployment package
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USER }}
        key: ${{ secrets.PROD_SSH_KEY }}
        port: ${{ secrets.PROD_PORT }}
        source: "deployment-package/*"
        target: "/opt/cet4-learning/production/current/"
        strip_components: 1
        
    - name: Execute production deployment
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USER }}
        key: ${{ secrets.PROD_SSH_KEY }}
        port: ${{ secrets.PROD_PORT }}
        script: |
          cd /opt/cet4-learning/production/current
          
          # 设置脚本权限
          chmod +x scripts/*.sh
          
          # 拉取最新镜像
          docker-compose pull
          
          # 启动服务
          ./scripts/docker-deploy.sh start production
          
          # 等待服务启动
          sleep 60
          
          # 健康检查
          if curl -f http://localhost:8000/health; then
            echo "✅ Production deployment successful"
          else
            echo "❌ Production deployment failed - initiating rollback"
            ./scripts/docker-deploy.sh stop
            
            # 回滚到备份版本
            cd ..
            BACKUP_DIR=$(ls -t | grep backup- | head -n 1)
            if [ -n "$BACKUP_DIR" ]; then
              mv current failed-$(date +%Y%m%d_%H%M%S)
              mv $BACKUP_DIR current
              cd current
              ./scripts/docker-deploy.sh start production
              echo "🔄 Rollback completed"
            fi
            exit 1
          fi

  # 部署后监控
  post-deployment-monitoring:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
    - name: Wait for service stabilization
      run: sleep 120
      
    - name: Check service health
      run: |
        if [[ "${{ needs.deploy-staging.result }}" == "success" ]]; then
          echo "Checking staging environment..."
          curl -f https://staging.cet4-learning.com/health || echo "Staging health check failed"
        fi
        
        if [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
          echo "Checking production environment..."
          curl -f https://cet4-learning.com/health || echo "Production health check failed"
        fi
        
    - name: Send deployment notification
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
