# 英语四级学习系统 - 代码质量检查工作流
# 深度代码质量分析和安全扫描

name: Code Quality Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # 每天凌晨2点运行完整质量检查
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # 深度代码分析
  deep-analysis:
    name: Deep Code Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整历史用于分析

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install analysis tools
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # 确保安装所有必需的依赖
        pip install httpx aiofiles 'python-jose[cryptography]'
        pip install ruff mypy black isort bandit safety
        pip install vulture  # 死代码检测
        pip install radon    # 复杂度分析
        pip install xenon    # 复杂度监控

    - name: Run comprehensive linting
      run: |
        echo "::group::Comprehensive Linting Report"

        # Ruff详细检查
        echo "=== Ruff Analysis ==="
        ruff check . --statistics --output-format=json > ruff-report.json || true
        ruff check . --statistics

        # MyPy详细检查
        echo "=== MyPy Analysis ==="
        mypy . --ignore-missing-imports --html-report mypy-report --txt-report mypy-txt-report || true

        # Black格式检查
        echo "=== Black Analysis ==="
        black --check --diff . > black-report.txt 2>&1 || true

        # isort检查
        echo "=== isort Analysis ==="
        isort --check-only --diff . > isort-report.txt 2>&1 || true

        echo "::endgroup::"

    - name: Dead code detection
      run: |
        echo "::group::Dead Code Detection"
        vulture app/ --min-confidence 80 --sort-by-size > vulture-report.txt || true
        cat vulture-report.txt
        echo "::endgroup::"

    - name: Complexity analysis
      run: |
        echo "::group::Code Complexity Analysis"

        # 圈复杂度分析
        radon cc app/ -a -nc > complexity-report.txt
        cat complexity-report.txt

        # 维护性指数
        radon mi app/ -nc > maintainability-report.txt
        cat maintainability-report.txt

        # 复杂度监控
        xenon --max-absolute B --max-modules A --max-average A app/ || true

        echo "::endgroup::"

    - name: Upload analysis reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: code-analysis-reports
        path: |
          ruff-report.json
          mypy-report/
          mypy-txt-report/
          black-report.txt
          isort-report.txt
          vulture-report.txt
          complexity-report.txt
          maintainability-report.txt

  # 安全扫描
  security-analysis:
    name: Security Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # 确保安装所有必需的依赖
        pip install httpx aiofiles 'python-jose[cryptography]'
        pip install bandit[toml] safety semgrep

    - name: Run Bandit security scan
      run: |
        echo "::group::Bandit Security Scan"
        bandit -r app/ -f json -o bandit-report.json || true
        bandit -r app/ -f txt -o bandit-report.txt || true
        bandit -r app/ -ll  # 只显示中高风险
        echo "::endgroup::"

    - name: Run Safety dependency scan
      run: |
        echo "::group::Safety Dependency Scan"
        safety check --json --output safety-report.json || true
        safety check --output safety-report.txt || true
        safety check
        echo "::endgroup::"

    - name: Run Semgrep security scan
      run: |
        echo "::group::Semgrep Security Scan"
        semgrep --config=auto --json --output=semgrep-report.json app/ || true
        semgrep --config=auto app/ || true
        echo "::endgroup::"

    - name: Check for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          bandit-report.txt
          safety-report.json
          safety-report.txt
          semgrep-report.json

  # 前端质量分析
  frontend-analysis:
    name: Frontend Quality Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: frontend
      run: npm ci

    - name: Run ESLint with detailed reporting
      working-directory: frontend
      run: |
        echo "::group::ESLint Detailed Analysis"
        npx eslint src/ --ext .ts,.tsx,.js,.jsx --format json --output-file eslint-report.json || true
        npx eslint src/ --ext .ts,.tsx,.js,.jsx --format html --output-file eslint-report.html || true
        npx eslint src/ --ext .ts,.tsx,.js,.jsx
        echo "::endgroup::"

    - name: Run TypeScript strict check
      working-directory: frontend
      run: |
        echo "::group::TypeScript Strict Check"
        npx tsc --noEmit --strict --noImplicitAny --noImplicitReturns --noImplicitThis || true
        echo "::endgroup::"

    - name: Bundle size analysis
      working-directory: frontend
      run: |
        echo "::group::Bundle Size Analysis"
        npm run build
        npx bundlesize || true
        echo "::endgroup::"

    - name: Dependency audit
      working-directory: frontend
      run: |
        echo "::group::Dependency Audit"
        npm audit --audit-level moderate --json > npm-audit-report.json || true
        npm audit --audit-level moderate
        echo "::endgroup::"

    - name: Upload frontend reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: frontend-analysis-reports
        path: |
          frontend/eslint-report.json
          frontend/eslint-report.html
          frontend/npm-audit-report.json

  # 质量门禁
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [deep-analysis, security-analysis, frontend-analysis]
    if: always()

    steps:
    - name: Download all reports
      uses: actions/download-artifact@v3

    - name: Evaluate quality metrics
      run: |
        echo "::group::Quality Gate Evaluation"

        # 检查安全扫描结果
        if [ -f security-reports/bandit-report.json ]; then
          HIGH_SEVERITY=$(jq '.results[] | select(.issue_severity == "HIGH") | length' security-reports/bandit-report.json | wc -l)
          if [ "$HIGH_SEVERITY" -gt 0 ]; then
            echo "❌ High severity security issues found: $HIGH_SEVERITY"
            exit 1
          fi
        fi

        # 检查依赖漏洞
        if [ -f security-reports/safety-report.json ]; then
          VULNERABILITIES=$(jq '.vulnerabilities | length' security-reports/safety-report.json)
          if [ "$VULNERABILITIES" -gt 0 ]; then
            echo "⚠️ Dependency vulnerabilities found: $VULNERABILITIES"
          fi
        fi

        echo "✅ Quality gate passed"
        echo "::endgroup::"

    - name: Generate quality report
      run: |
        cat > quality-report.md << EOF
        # Code Quality Report

        ## Summary
        - **Security Scan**: $([ -f security-reports/bandit-report.json ] && echo "✅ Passed" || echo "⚠️ Skipped")
        - **Dependency Check**: $([ -f security-reports/safety-report.json ] && echo "✅ Passed" || echo "⚠️ Skipped")
        - **Code Analysis**: $([ -f code-analysis-reports/ruff-report.json ] && echo "✅ Passed" || echo "⚠️ Skipped")
        - **Frontend Analysis**: $([ -f frontend-analysis-reports/eslint-report.json ] && echo "✅ Passed" || echo "⚠️ Skipped")

        ## Recommendations
        - Review security scan results
        - Address high complexity code
        - Update vulnerable dependencies
        - Maintain code quality standards
        EOF

    - name: Upload quality report
      uses: actions/upload-artifact@v3
      with:
        name: quality-report
        path: quality-report.md