# CET4学习系统 - 依赖更新和安全检查工作流
# 定期检查和更新依赖，确保安全性

name: Dependency Update

on:
  schedule:
    # 每周一凌晨2点运行
    - cron: '0 2 * * 1'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Update type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Python依赖更新
  python-dependency-update:
    name: Python Dependency Update
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install pip-tools
      run: |
        python -m pip install --upgrade pip
        pip install pip-tools pip-audit safety
        
    - name: Check current dependencies
      run: |
        echo "::group::Current Dependencies"
        pip list --format=json > current-deps.json
        cat current-deps.json
        echo "::endgroup::"
        
    - name: Security audit
      run: |
        echo "::group::Security Audit"
        
        # 使用pip-audit检查已知漏洞
        pip-audit --format=json --output=pip-audit-report.json || true
        pip-audit --format=table
        
        # 使用safety检查
        safety check --json --output=safety-report.json || true
        safety check
        
        echo "::endgroup::"
        
    - name: Check for outdated packages
      run: |
        echo "::group::Outdated Packages"
        pip list --outdated --format=json > outdated-deps.json
        pip list --outdated
        echo "::endgroup::"
        
    - name: Generate dependency update report
      run: |
        python << 'EOF'
        import json
        import os
        
        # 读取安全报告
        security_issues = []
        if os.path.exists('pip-audit-report.json'):
            with open('pip-audit-report.json', 'r') as f:
                audit_data = json.load(f)
                security_issues.extend(audit_data.get('vulnerabilities', []))
        
        # 读取过期包
        outdated_packages = []
        if os.path.exists('outdated-deps.json'):
            with open('outdated-deps.json', 'r') as f:
                outdated_packages = json.load(f)
        
        # 生成报告
        report = {
            'security_issues': len(security_issues),
            'outdated_packages': len(outdated_packages),
            'critical_updates': [],
            'recommended_updates': []
        }
        
        # 识别关键更新
        critical_packages = ['fastapi', 'sqlalchemy', 'pydantic', 'cryptography']
        for pkg in outdated_packages:
            if pkg['name'].lower() in critical_packages:
                report['critical_updates'].append(pkg)
            else:
                report['recommended_updates'].append(pkg)
        
        with open('dependency-report.json', 'w') as f:
            json.dump(report, f, indent=2)
            
        print(f"Security issues: {report['security_issues']}")
        print(f"Outdated packages: {report['outdated_packages']}")
        print(f"Critical updates: {len(report['critical_updates'])}")
        EOF
        
    - name: Create pull request for critical updates
      if: github.event_name == 'schedule'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "chore: update critical Python dependencies"
        title: "🔒 Critical Python Dependency Updates"
        body: |
          ## 🔒 Critical Dependency Updates
          
          This PR contains critical security and compatibility updates for Python dependencies.
          
          ### Security Issues
          - Found security vulnerabilities that need immediate attention
          
          ### Critical Package Updates
          - Core framework and security-related packages
          
          ### Verification
          - [ ] All tests pass
          - [ ] Security scans clean
          - [ ] No breaking changes detected
          
          **Auto-generated by dependency-update workflow**
        branch: dependency-updates/python-critical
        delete-branch: true
        
    - name: Upload dependency reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: python-dependency-reports
        path: |
          current-deps.json
          outdated-deps.json
          pip-audit-report.json
          safety-report.json
          dependency-report.json

  # Node.js依赖更新
  nodejs-dependency-update:
    name: Node.js Dependency Update
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      working-directory: frontend
      run: npm ci
      
    - name: Check for outdated packages
      working-directory: frontend
      run: |
        echo "::group::Outdated NPM Packages"
        npm outdated --json > outdated-npm.json || true
        npm outdated
        echo "::endgroup::"
        
    - name: Security audit
      working-directory: frontend
      run: |
        echo "::group::NPM Security Audit"
        npm audit --json > npm-audit.json || true
        npm audit
        echo "::endgroup::"
        
    - name: Upload Node.js dependency reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: nodejs-dependency-reports
        path: |
          frontend/outdated-npm.json
          frontend/npm-audit.json

  # 依赖更新总结
  dependency-summary:
    name: Dependency Update Summary
    runs-on: ubuntu-latest
    needs: [python-dependency-update, nodejs-dependency-update]
    if: always()
    
    steps:
    - name: Download all reports
      uses: actions/download-artifact@v3
      
    - name: Generate summary report
      run: |
        echo "# 🔍 Dependency Update Summary" > summary.md
        echo "" >> summary.md
        echo "## Python Dependencies" >> summary.md
        
        if [ -f python-dependency-reports/dependency-report.json ]; then
          python << 'EOF'
          import json
          with open('python-dependency-reports/dependency-report.json', 'r') as f:
              data = json.load(f)
          
          print(f"- Security Issues: {data['security_issues']}")
          print(f"- Outdated Packages: {data['outdated_packages']}")
          print(f"- Critical Updates: {len(data['critical_updates'])}")
          EOF
        fi
        
        echo "" >> summary.md
        echo "## Node.js Dependencies" >> summary.md
        echo "- Check npm audit results in artifacts" >> summary.md
        
        cat summary.md
        
    - name: Upload summary
      uses: actions/upload-artifact@v3
      with:
        name: dependency-summary
        path: summary.md
